[gd_scene load_steps=4 format=3 uid="uid://c7rdyn4cryv67"]

[sub_resource type="Shader" id="Shader_qg3bi"]
code = "shader_type spatial;
render_mode cull_front, unshaded; // Render only front-facing polygons to create an outline effect

// Uniforms for controlling outline properties
uniform vec4 outline_color : source_color; // Color of the outline
uniform float outline_width : hint_range(0.0, 5.0) = 1.0; // Thickness of the outline
uniform float fade_start : hint_range(0.0, 100.0) = 10.0; // Distance at which fading starts
uniform float fade_end : hint_range(0.0, 100.0) = 30.0; // Distance at which outline becomes invisible

void vertex() {
	// Convert the vertex position to clip space
	vec4 clip_position = PROJECTION_MATRIX * (MODELVIEW_MATRIX * vec4(VERTEX, 1.0));

	// Transform the normal into clip space
	vec3 clip_normal = mat3(PROJECTION_MATRIX * MODELVIEW_MATRIX) * NORMAL;

	// Calculate offset for outline expansion
	vec2 offset = normalize(clip_normal.xy) * outline_width * clip_position.w / VIEWPORT_SIZE;

	// Apply the offset to create the outline effect
	clip_position.xy += offset * 2.0;

	// Set final position
	POSITION = clip_position;
}

void fragment() {
	// Get the distance from the camera
	float dist = length(VERTEX);

	// Compute fade factor based on distance
	float fade = clamp(1.0 - (dist - fade_start) / (fade_end - fade_start), 0.0, 1.0);

	// Apply fade effect
	ALBEDO = outline_color.rgb;
	ALPHA = outline_color.a * fade; // Multiply alpha by fade factor
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qkp3h"]
render_priority = 0
shader = SubResource("Shader_qg3bi")
shader_parameter/outline_color = null
shader_parameter/outline_width = 1.0
shader_parameter/fade_start = 10.0
shader_parameter/fade_end = 30.0

[sub_resource type="SphereMesh" id="SphereMesh_nmtv6"]
material = SubResource("ShaderMaterial_qkp3h")

[node name="Node3D" type="Node3D"]

[node name="cursor-shader" type="MeshInstance3D" parent="."]
mesh = SubResource("SphereMesh_nmtv6")
